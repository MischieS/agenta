'use client';
import React, { useState, useEffect, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, Filter, X, Loader2, UserPlus, Users, UserX, AlertCircle, CheckCircle, ChevronDown, ChevronUp } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { createClient } from '@/lib/supabase/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/components/ui/use-toast';
import { Skeleton } from '@/components/ui/skeleton';
import { cn } from '@/lib/utils';

// Animation variants
const fadeIn = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0, transition: { duration: 0.3 } }
};

// Types for our data
interface Student {
  id: string;
  name: string;
  email: string;
  country: string;
  university: string;
  university_id?: string;
  assigned_staff_id: string | null;
  avatar?: string;
}

interface StaffMember {
  id: string;
  name: string;
  email: string;
  department: string;
  position: string;
  student_count: number;
  avatar?: string;
  color?: string;
}

// Generate a color based on a string
const stringToColor = (str: string) => {
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    hash = str.charCodeAt(i) + ((hash << 5) - hash);
  }
  const hue = Math.abs(hash % 360);
  return `hsl(${hue}, 70%, 60%)`;
};

export default function StudentStaffAssignment() {
  const { hasPermission } = useAuth();
  const canEdit = hasPermission('student_staff_assignment', 'can_edit');
  const { toast } = useToast();
  
  // State variables
  const [students, setStudents] = useState<Student[]>([]);
  const [staff, setStaff] = useState<StaffMember[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // UI State
  const [isFiltersOpen, setIsFiltersOpen] = useState(false);
  
  // Filter state
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedStaff, setSelectedStaff] = useState<string>('');
  const [selectedUniversity, setSelectedUniversity] = useState<string>('');
  const [selectedCountry, setSelectedCountry] = useState<string>('');
  const [unassignedOnly, setUnassignedOnly] = useState(false);
  
  // Assignment state
  const [selectedStudents, setSelectedStudents] = useState<string[]>([]);
  const [targetStaffId, setTargetStaffId] = useState<string>('');
  const [isAssigning, setIsAssigning] = useState(false);
  
  // Drag and drop state
  const [draggedStudentId, setDraggedStudentId] = useState<string | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [dragOverStaffId, setDragOverStaffId] = useState<string | null>(null);

  // Fetch students and staff
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const supabase = createClient();
        
        // Fetch students with basic info
        const { data: studentData, error: studentError } = await supabase
          .from('students')
          .select('*');
        
        if (studentError) throw studentError;
        
        // Fetch staff with student counts
        const { data: staffData, error: staffError } = await supabase
          .from('staff')
          .select('*');
        
        if (staffError) throw staffError;
        
        // Format staff with avatars and colors
        const formattedStaff = staffData.map(staff => ({
          ...staff,
          color: stringToColor(staff.id),
          avatar: `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(staff.name)}`,
          student_count: staff.student_count || 0
        }));
        
        // Format students with avatars
        const formattedStudents = studentData.map(student => ({
          ...student,
          avatar: `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(student.name)}`
        }));
        
        setStudents(formattedStudents);
        setStaff(formattedStaff);
        setError(null);
      } catch (error) {
        console.error('Error fetching data:', error);
        setError('Failed to load data. Please try again.');
        toast({
          title: 'Error',
          description: 'Failed to load data',
          variant: 'destructive',
        });
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [toast]);

  // Handle student assignment
  const handleAssignStudents = async (studentIds: string[] = selectedStudents, staffId: string = targetStaffId) => {
    if (!staffId || studentIds.length === 0) {
      toast({
        title: 'Error',
        description: 'Please select both students and a staff member',
        variant: 'destructive',
      });
      return false;
    }

    setIsAssigning(true);
    
    try {
      const supabase = createClient();
      
      // Update each selected student
      const { error } = await supabase
        .from('students')
        .update({ assigned_staff_id: staffId })
        .in('id', studentIds);
      
      if (error) throw error;
      
      // Update local state
      setStudents(prevStudents => 
        prevStudents.map(student => 
          studentIds.includes(student.id)
            ? { ...student, assigned_staff_id: staffId }
            : student
        )
      );
      
      // Update staff counts
      setStaff(prevStaff => 
        prevStaff.map(staff => {
          const assignedCount = studentIds.length;
          const wasAssigned = studentIds.some(id => 
            prevStudents.find(s => s.id === id)?.assigned_staff_id === staff.id
          );
          
          if (staff.id === staffId) {
            return { 
              ...staff, 
              student_count: (staff.student_count || 0) + (wasAssigned ? 0 : assignedCount)
            };
          } else if (wasAssigned) {
            return {
              ...staff,
              student_count: Math.max(0, (staff.student_count || 0) - assignedCount)
            };
          }
          return staff;
        })
      );
      
      setSelectedStudents([]);
      setTargetStaffId('');
      
      toast({
        title: 'Success',
        description: `Assigned ${studentIds.length} student(s) successfully`,
      });
      
      return true;
    } catch (error) {
      console.error('Error assigning students:', error);
      toast({
        title: 'Error',
        description: 'Failed to assign students',
        variant: 'destructive',
      });
      return false;
    } finally {
      setIsAssigning(false);
    }
  };

  // Drag and drop handlers
  const handleDragStart = (e: React.DragEvent, studentId: string) => {
    e.dataTransfer.setData('studentId', studentId);
    setDraggedStudentId(studentId);
    setIsDragging(true);
  };

  const handleDragOver = (e: React.DragEvent, staffId: string) => {
    e.preventDefault();
    setDragOverStaffId(staffId);
  };

  const handleDragLeave = () => {
    setDragOverStaffId(null);
  };

  const handleDrop = async (e: React.DragEvent, staffId: string) => {
    e.preventDefault();
    setDragOverStaffId(null);
    
    const studentId = e.dataTransfer.getData('studentId');
    if (!studentId) return;
    
    const success = await handleAssignStudents([studentId], staffId);
    if (success) {
      setDraggedStudentId(null);
      setIsDragging(false);
    }
  };

  // Toggle student selection
  const toggleStudentSelection = (studentId: string) => {
    setSelectedStudents(prev => 
      prev.includes(studentId)
        ? prev.filter(id => id !== studentId)
        : [...prev, studentId]
    );
  };

  // Clear all filters
  const clearFilters = () => {
    setSearchTerm('');
    setSelectedStaff('');
    setSelectedUniversity('');
    setSelectedCountry('');
    setUnassignedOnly(false);
  };

  // Generate filtered students
  const filteredStudents = useMemo(() => {
    return students.filter(student => {
      const matchesSearch = !searchTerm || 
        student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        student.email.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesStaff = !selectedStaff || 
        student.assigned_staff_id === selectedStaff;
      
      const matchesUniversity = !selectedUniversity || 
        student.university_id === selectedUniversity;
      
      const matchesCountry = !selectedCountry || 
        student.country?.toLowerCase() === selectedCountry.toLowerCase();
      
      const matchesUnassigned = !unassignedOnly || 
        !student.assigned_staff_id;
      
      return matchesSearch && matchesStaff && matchesUniversity && 
             matchesCountry && matchesUnassigned;
    });
  }, [students, searchTerm, selectedStaff, selectedUniversity, selectedCountry, unassignedOnly]);

  // Generate unique countries for filter
  const countries = useMemo(() => {
    const countrySet = new Set<string>();
    students.forEach(student => {
      if (student.country) {
        countrySet.add(student.country);
      }
    });
    return Array.from(countrySet).sort();
  }, [students]);

  // Generate unique universities for filter
  const universities = useMemo(() => {
    const universityMap = new Map<string, { id: string; name: string }>();
    students.forEach(student => {
      if (student.university_id && student.university) {
        universityMap.set(student.university_id, {
          id: student.university_id,
          name: student.university
        });
      }
    });
    return Array.from(universityMap.values()).sort((a, b) => 
      a.name.localeCompare(b.name)
    );
  }, [students]);

  // Loading state
  if (loading) {
    return (
      <div className="space-y-6 p-4">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold">Student-Staff Assignment</h1>
            <p className="text-muted-foreground">Loading data...</p>
          </div>
          <Button disabled variant="outline">
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Loading...
          </Button>
        </div>
        
        <div className="grid gap-6 md:grid-cols-3">
          {[1, 2, 3].map(i => (
            <Card key={i}>
              <CardHeader>
                <Skeleton className="h-6 w-3/4" />
                <Skeleton className="h-4 w-1/2 mt-2" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-4 w-full mt-2" />
                <Skeleton className="h-4 w-5/6 mt-2" />
                <Skeleton className="h-4 w-4/6 mt-2" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="rounded-md bg-red-50 p-4">
        <div className="flex">
          <div className="flex-shrink-0">
            <AlertCircle className="h-5 w-5 text-red-400" aria-hidden="true" />
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-red-800">Error loading data</h3>
            <div className="mt-2 text-sm text-red-700">
              <p>{error}</p>
            </div>
            <div className="mt-4">
              <button
                type="button"
                onClick={() => window.location.reload()}
                className="rounded-md bg-red-50 text-sm font-medium text-red-700 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
              >
                Try again
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col space-y-4 md:flex-row md:items-center md:justify-between md:space-y-0">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Student-Staff Assignment</h1>
          <p className="text-muted-foreground">
            Assign students to staff members and manage their relationships
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setIsFiltersOpen(!isFiltersOpen)}
          >
            <Filter className="mr-2 h-4 w-4" />
            {isFiltersOpen ? 'Hide Filters' : 'Show Filters'}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={clearFilters}
            disabled={!searchTerm && !selectedStaff && !selectedUniversity && !selectedCountry && !unassignedOnly}
          >
            <X className="mr-2 h-4 w-4" />
            Clear Filters
          </Button>
        </div>
      </div>

      {/* Filters */}
      <AnimatePresence>
        {isFiltersOpen && (
          <motion.div
            initial="hidden"
            animate="visible"
            exit="hidden"
            variants={fadeIn}
            className="rounded-lg border bg-card p-4 shadow-sm"
          >
            <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
              <div>
                <Label htmlFor="search">Search</Label>
                <Input
                  id="search"
                  placeholder="Search students..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="staff">Staff Member</Label>
                <Select
                  value={selectedStaff}
                  onValueChange={setSelectedStaff}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="Filter by staff" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">All Staff</SelectItem>
                    {staff.map((s) => (
                      <SelectItem key={s.id} value={s.id}>
                        {s.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="university">University</Label>
                <Select
                  value={selectedUniversity}
                  onValueChange={setSelectedUniversity}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="Filter by university" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">All Universities</SelectItem>
                    {universities.map((uni) => (
                      <SelectItem key={uni.id} value={uni.id}>
                        {uni.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="flex items-end space-x-4">
                <div className="flex-1">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="unassigned"
                      checked={unassignedOnly}
                      onCheckedChange={(checked) => setUnassignedOnly(checked === true)}
                    />
                    <Label htmlFor="unassigned">Show unassigned only</Label>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Staff Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {staff.map((staffMember) => (
          <motion.div
            key={staffMember.id}
            className={cn(
              'relative rounded-lg border p-4 transition-all',
              dragOverStaffId === staffMember.id
                ? 'border-primary bg-primary/5 scale-[1.02]'
                : 'bg-card hover:bg-accent/50',
              isDragging && 'transition-transform duration-200'
            )}
            onDragOver={(e) => handleDragOver(e, staffMember.id)}
            onDragLeave={handleDragLeave}
            onDrop={(e) => handleDrop(e, staffMember.id)}
            variants={fadeIn}
            layout
          >
            <div className="flex items-center space-x-3">
              <div 
                className="h-10 w-10 rounded-full flex items-center justify-center text-white"
                style={{ backgroundColor: staffMember.color || '#6b7280' }}
              >
                {staffMember.name.charAt(0)}
              </div>
              <div className="flex-1 min-w-0">
                <h3 className="text-sm font-medium truncate">{staffMember.name}</h3>
                <p className="text-xs text-muted-foreground truncate">{staffMember.position}</p>
              </div>
              <Badge variant="secondary" className="ml-auto">
                {staffMember.student_count} students
              </Badge>
            </div>
            
            {dragOverStaffId === staffMember.id && (
              <div className="absolute inset-0 bg-primary/10 rounded-lg border-2 border-dashed border-primary flex items-center justify-center pointer-events-none">
                <UserPlus className="h-6 w-6 text-primary" />
              </div>
            )}
          </motion.div>
        ))}
      </div>

      {/* Students Table */}
      <Card>
        <CardHeader>
          <div className="flex flex-col space-y-1.5 sm:flex-row sm:items-center sm:justify-between">
            <div>
              <CardTitle>Students</CardTitle>
              <CardDescription>
                {filteredStudents.length} student{filteredStudents.length !== 1 ? 's' : ''} found
              </CardDescription>
            </div>
            
            {canEdit && selectedStudents.length > 0 && (
              <div className="flex items-center space-x-2">
                <Select
                  value={targetStaffId}
                  onValueChange={setTargetStaffId}
                  disabled={isAssigning}
                >
                  <SelectTrigger className="w-[200px]">
                    <SelectValue placeholder="Assign to staff..." />
                  </SelectTrigger>
                  <SelectContent>
                    {staff.map((s) => (
                      <SelectItem key={s.id} value={s.id}>
                        {s.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Button
                  onClick={() => handleAssignStudents()}
                  disabled={!targetStaffId || isAssigning}
                >
                  {isAssigning ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Assigning...
                    </>
                  ) : (
                    'Assign Selected'
                  )}
                </Button>
              </div>
            )}
          </div>
        </CardHeader>
        
        <CardContent>
          <div className="rounded-md border">
            <div className="relative w-full overflow-auto">
              <table className="w-full caption-bottom text-sm">
                <thead className="[&_tr]:border-b">
                  <tr className="border-b transition-colors hover:bg-muted/50">
                    <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-12">
                      <Checkbox
                        id="select-all"
                        checked={selectedStudents.length > 0 && selectedStudents.length === filteredStudents.length}
                        onCheckedChange={() => {
                          if (selectedStudents.length === filteredStudents.length) {
                            setSelectedStudents([]);
                          } else {
                            setSelectedStudents(filteredStudents.map(s => s.id));
                          }
                        }}
                        aria-label="Select all"
                      />
                    </th>
                    <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Name</th>
                    <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Email</th>
                    <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">University</th>
                    <th className="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Assigned To</th>
                    <th className="h-12 px-4 text-right align-middle font-medium text-muted-foreground">Actions</th>
                  </tr>
                </thead>
                <tbody className="[&_tr:last-child]:border-0">
                  {filteredStudents.length > 0 ? (
                    filteredStudents.map((student) => (
                      <motion.tr
                        key={student.id}
                        className="border-b transition-colors hover:bg-muted/50"
                        draggable={canEdit}
                        onDragStart={(e) => handleDragStart(e, student.id)}
                        variants={fadeIn}
                        layout
                      >
                        <td className="p-4 align-middle">
                          <Checkbox
                            id={`select-${student.id}`}
                            checked={selectedStudents.includes(student.id)}
                            onCheckedChange={() => toggleStudentSelection(student.id)}
                            aria-label={`Select ${student.name}`}
                          />
                        </td>
                        <td className="p-4 align-middle font-medium">
                          <div className="flex items-center space-x-3">
                            <div 
                              className="h-8 w-8 rounded-full flex items-center justify-center text-white text-xs"
                              style={{ backgroundColor: stringToColor(student.id) }}
                            >
                              {student.name.charAt(0)}
                            </div>
                            <span>{student.name}</span>
                          </div>
                        </td>
                        <td className="p-4 align-middle">
                          <div className="text-sm text-muted-foreground">
                            {student.email}
                          </div>
                        </td>
                        <td className="p-4 align-middle">
                          <div className="text-sm">
                            {student.university}
                          </div>
                          <div className="text-xs text-muted-foreground">
                            {student.country}
                          </div>
                        </td>
                        <td className="p-4 align-middle">
                          {student.assigned_staff_id ? (
                            <div className="flex items-center space-x-2">
                              <div 
                                className="h-6 w-6 rounded-full flex items-center justify-center text-white text-xs"
                                style={{ 
                                  backgroundColor: staff.find(s => s.id === student.assigned_staff_id)?.color || '#6b7280'
                                }}
                              >
                                {staff.find(s => s.id === student.assigned_staff_id)?.name.charAt(0) || '?'}
                              </div>
                              <span className="text-sm">
                                {staff.find(s => s.id === student.assigned_staff_id)?.name || 'Unknown'}
                              </span>
                            </div>
                          ) : (
                            <span className="text-sm text-muted-foreground">Unassigned</span>
                          )}
                        </td>
                        <td className="p-4 align-middle text-right">
                          {canEdit && (
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => {
                                setSelectedStudents([student.id]);
                                const staffSelect = document.getElementById('staff-select');
                                if (staffSelect) {
                                  staffSelect.scrollIntoView({ behavior: 'smooth' });
                                  staffSelect.focus();
                                }
                              }}
                            >
                              <UserPlus className="h-4 w-4 mr-2" />
                              Assign
                            </Button>
                          )}
                        </td>
                      </motion.tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan={6} className="h-24 text-center">
                        <div className="flex flex-col items-center justify-center space-y-2">
                          <Users className="h-8 w-8 text-muted-foreground" />
                          <p className="text-sm text-muted-foreground">
                            No students found. Try adjusting your filters.
                          </p>
                        </div>
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
